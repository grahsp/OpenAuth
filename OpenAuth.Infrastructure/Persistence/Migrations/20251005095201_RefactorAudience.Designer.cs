// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenAuth.Infrastructure.Persistence;

#nullable disable

namespace OpenAuth.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251005095201_RefactorAudience")]
    partial class RefactorAudience
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpenAuth.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("TokenLifetime")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("OpenAuth.Domain.Entities.ClientSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecrets");
                });

            modelBuilder.Entity("OpenAuth.Domain.Entities.SigningKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SigningKeys");
                });

            modelBuilder.Entity("OpenAuth.Domain.Entities.Client", b =>
                {
                    b.OwnsMany("OpenAuth.Domain.ValueObjects.Audience", "Audiences", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("_scopes")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)")
                                .HasColumnName("Scopes");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.ToTable("Audiences", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Audiences");
                });

            modelBuilder.Entity("OpenAuth.Domain.Entities.ClientSecret", b =>
                {
                    b.HasOne("OpenAuth.Domain.Entities.Client", "Client")
                        .WithMany("Secrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OpenAuth.Domain.Entities.SigningKey", b =>
                {
                    b.OwnsOne("OpenAuth.Domain.ValueObjects.KeyMaterial", "KeyMaterial", b1 =>
                        {
                            b1.Property<Guid>("SigningKeyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Alg")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Algorithm");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Key");

                            b1.Property<string>("Kty")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("KeyType");

                            b1.HasKey("SigningKeyId");

                            b1.ToTable("SigningKeys");

                            b1.WithOwner()
                                .HasForeignKey("SigningKeyId");
                        });

                    b.Navigation("KeyMaterial")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenAuth.Domain.Entities.Client", b =>
                {
                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
